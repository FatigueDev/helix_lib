---@meta BlockGeneric
---@class BlockGeneric: Block
---@field ctor fun(): BlockGeneric
---@field GetDecal fun(world: IWorldAccessor, pos: BlockPos, decalTexSource: ITexPositionSource, decalModelData: MeshData&, blockModelData: MeshData&): nil
---@field OnDecalTesselation fun(world: IWorldAccessor, decalMesh: MeshData, pos: BlockPos): nil
---@field GetParticleBreakBox fun(blockAccess: IBlockAccessor, pos: BlockPos, facing: BlockFacing): Cuboidf
---@field GetParticleCollisionBoxes fun(blockAccessor: IBlockAccessor, pos: BlockPos): Cuboidf[]
---@field GetCollisionBoxes fun(blockAccessor: IBlockAccessor, pos: BlockPos): Cuboidf[]
---@field GetSelectionBoxes fun(blockAccessor: IBlockAccessor, pos: BlockPos): Cuboidf[]
---@field TryPlaceBlockForWorldGen fun(blockAccessor: IBlockAccessor, pos: BlockPos, onBlockFace: BlockFacing, worldgenRandom: LCGRandom): boolean
---@field DoParticalSelection fun(world: IWorldAccessor, pos: BlockPos): boolean
---@field get_Id fun(): number
---@field get_ItemClass fun(): EnumItemClass
---@field get_ForFluidsLayer fun(): boolean
---@field get_RemapToLiquidsLayer fun(): string
---@field get_FirstTextureInventory fun(): CompositeTexture
---@field get_PushVector fun(): Vec3d
---@field set_PushVector fun(value: Vec3d): nil
---@field get_ClimateColorMapForMap fun(): string
---@field get_SeasonColorMapForMap fun(): string
---@field OnLoaded fun(api: ICoreAPI): nil
---@field LoadTextureSubIdForBlockColor fun(): nil
---@field set_AllSidesOpaque fun(value: boolean): nil
---@field get_AllSidesOpaque fun(): boolean
---@field DisplacesLiquids fun(blockAccess: IBlockAccessor, pos: BlockPos): boolean
---@field SideIsSolid fun(pos: BlockPos, faceIndex: number): boolean
---@overload fun(blockAccess: IBlockAccessor, pos: BlockPos, faceIndex: number): boolean
---@field ShouldMergeFace fun(facingIndex: number, neighbourBlock: Block, intraChunkIndex3d: number): boolean
---@field GetBlockMaterial fun(blockAccessor: IBlockAccessor, pos: BlockPos, stack: ItemStack): EnumBlockMaterial
---@field GetResistance fun(blockAccessor: IBlockAccessor, pos: BlockPos): Single
---@field GetSounds fun(blockAccessor: IBlockAccessor, pos: BlockPos, stack: ItemStack): BlockSounds
---@field GetAttributes fun(blockAccessor: IBlockAccessor, pos: BlockPos): Jsontable
---@field DoEmitSideAo fun(caller: IGeometryTester, facing: BlockFacing): boolean
---@field DoEmitSideAoByFlag fun(caller: IGeometryTester, vec: Vec3iAndFacingFlags, flags: number): boolean
---@field GetLightAbsorption fun(blockAccessor: IBlockAccessor, pos: BlockPos): number
---@overload fun(chunk: IWorldChunk, pos: BlockPos): number
---@field GetLiquidCode fun(blockAccessor: IBlockAccessor, pos: BlockPos): string
---@field CanAttachBlockAt fun(blockAccessor: IBlockAccessor, block: Block, pos: BlockPos, blockFace: BlockFacing, attachmentArea: Cuboidi): boolean
---@field CanCreatureSpawnOn fun(blockAccessor: IBlockAccessor, pos: BlockPos, type: EntityProperties, sc: BaseSpawnConditions): boolean
---@field TryPlaceBlock fun(world: IWorldAccessor, byPlayer: IPlayer, itemstack: ItemStack, blockSel: BlockSelection, failureCode: string&): boolean
---@field CanPlaceBlock fun(world: IWorldAccessor, byPlayer: IPlayer, blockSel: BlockSelection, failureCode: string&): boolean
---@field DoPlaceBlock fun(world: IWorldAccessor, byPlayer: IPlayer, blockSel: BlockSelection, byItemStack: ItemStack): boolean
---@field OnBeingLookedAt fun(byPlayer: IPlayer, blockSel: BlockSelection, firstTick: boolean): nil
---@field OnGettingBroken fun(player: IPlayer, blockSel: BlockSelection, itemslot: ItemSlot, remainingResistance: Single, dt: Single, counter: number): Single
---@field RandomSoundPitch fun(world: IWorldAccessor): Single
---@field OnBlockBroken fun(world: IWorldAccessor, pos: BlockPos, byPlayer: IPlayer, dropQuantityMultiplier: Single): nil
---@field SpawnBlockBrokenParticles fun(pos: BlockPos): nil
---@field OnBrokenAsDecor fun(world: IWorldAccessor, pos: BlockPos, side: BlockFacing): nil
---@field OnCreatedByCrafting fun(allInputslots: ItemSlot[], outputSlot: ItemSlot, byRecipe: GridRecipe): nil
---@field GetDropsForHandbook fun(handbookStack: ItemStack, forPlayer: IPlayer): BlockDropItemStack[]
---@field GetDrops fun(world: IWorldAccessor, pos: BlockPos, byPlayer: IPlayer, dropQuantityMultiplier: Single): ItemStack[]
---@field OnPickBlock fun(world: IWorldAccessor, pos: BlockPos): ItemStack
---@field OnBlockRemoved fun(world: IWorldAccessor, pos: BlockPos): nil
---@field OnBlockPlaced fun(world: IWorldAccessor, blockPos: BlockPos, byItemStack: ItemStack): nil
---@field OnNeighbourBlockChange fun(world: IWorldAccessor, pos: BlockPos, neibpos: BlockPos): nil
---@field OnBlockInteractStart fun(world: IWorldAccessor, byPlayer: IPlayer, blockSel: BlockSelection): boolean
---@field Activate fun(world: IWorldAccessor, caller: Caller, blockSel: BlockSelection, activationArgs: ITreeAttribute): nil
---@field OnBlockInteractStep fun(secondsUsed: Single, world: IWorldAccessor, byPlayer: IPlayer, blockSel: BlockSelection): boolean
---@field OnBlockInteractStop fun(secondsUsed: Single, world: IWorldAccessor, byPlayer: IPlayer, blockSel: BlockSelection): nil
---@field OnBlockInteractCancel fun(secondsUsed: Single, world: IWorldAccessor, byPlayer: IPlayer, blockSel: BlockSelection, cancelReason: EnumItemUseCancelReason): boolean
---@field OnEntityInside fun(world: IWorldAccessor, entity: Entity, pos: BlockPos): nil
---@field OnEntityCollide fun(world: IWorldAccessor, entity: Entity, pos: BlockPos, facing: BlockFacing, collideSpeed: Vec3d, isImpact: boolean): nil
---@field OnFallOnto fun(world: IWorldAccessor, pos: BlockPos, block: Block, blockEntityAttributes: TreeAttribute): boolean
---@field ShouldReceiveClientParticleTicks fun(world: IWorldAccessor, player: IPlayer, pos: BlockPos, isWindAffected: boolean&): boolean
---@field ShouldPlayAmbientSound fun(world: IWorldAccessor, pos: BlockPos): boolean
---@field OnAsyncClientParticleTick fun(manager: IAsyncParticleManager, pos: BlockPos, windAffectednessAtPos: Single, secondsTicking: Single): nil
---@field ShouldReceiveServerGameTicks fun(world: IWorldAccessor, pos: BlockPos, offThreadRandom: Random, extra: table&): boolean
---@field OnServerGameTick fun(world: IWorldAccessor, pos: BlockPos, extra: table): nil
---@field OnJsonTesselation fun(sourceMesh: MeshData&, lightRgbsByCorner: number[]&, pos: BlockPos, chunkExtBlocks: Block[], extIndex3d: number): nil
---@field OnInstancedTesselation fun(light: number, pos: BlockPos, chunkExtBlocks: Block[], extIndex3d: number, sideDisableWindwave: number&): number
---@field DetermineTopMiddlePos fun(): nil
---@field IsReplacableBy fun(block: Block): boolean
---@field PerformSnowLevelUpdate fun(ba: IBulkBlockAccessor, pos: BlockPos, newBlock: Block, snowLevel: Single): nil
---@field GetSnowCoveredVariant fun(pos: BlockPos, snowLevel: Single): Block
---@field GetSnowLevel fun(pos: BlockPos): Single
---@field GetHeatRetention fun(pos: BlockPos, facing: BlockFacing): number
---@field GetRetention fun(pos: BlockPos, facing: BlockFacing, type: EnumRetentionany): number
---@field IsClimbable fun(pos: BlockPos): boolean
---@field GetRotatedBlockCode fun(angle: number): AssetLocation
---@field GetVerticallyFlippedBlockCode fun(): AssetLocation
---@field GetHorizontallyFlippedBlockCode fun(axis: EnumAxis): AssetLocation
---@field GetBehavior fun(type: any, withInheritance: boolean): BlockBehavior
---@field GetPlacedBlockInteractionHelp fun(world: IWorldAccessor, selection: BlockSelection, forPlayer: IPlayer): WorldInteraction[]
---@field GetPlacedBlockName fun(world: IWorldAccessor, pos: BlockPos): string
---@field GetPlacedBlockInfo fun(world: IWorldAccessor, pos: BlockPos, forPlayer: IPlayer): string
---@field AddMiningTierInfo fun(sb: stringBuilder): nil
---@field GetHeldItemInfo fun(inSlot: ItemSlot, dsc: stringBuilder, world: IWorldAccessor, withDebugInfo: boolean): nil
---@field AddExtraHeldItemInfoPostMaterial fun(inSlot: ItemSlot, dsc: stringBuilder, world: IWorldAccessor): nil
---@field GetSelectionColor fun(capi: ICoreClientAPI, pos: BlockPos): Vec4f
---@field OnCollectTextures fun(api: ICoreAPI, textureDict: ITextureLocationDictionary): nil
---@field GetBlastResistance fun(world: IWorldAccessor, pos: BlockPos, blastDirectionVector: Vec3f, blastType: EnumBlastany): Double
---@field ExplosionDropChance fun(world: IWorldAccessor, pos: BlockPos, blastType: EnumBlastany): Double
---@field OnBlockExploded fun(world: IWorldAccessor, pos: BlockPos, explosionCenter: BlockPos, blastType: EnumBlastany): nil
---@field GetRandomColor fun(capi: ICoreClientAPI, pos: BlockPos, facing: BlockFacing, rndIndex: number): number
---@overload fun(capi: ICoreClientAPI, stack: ItemStack): number
---@field GetColor fun(capi: ICoreClientAPI, pos: BlockPos): number
---@field GetColorWithoutTint fun(capi: ICoreClientAPI, pos: BlockPos): number
---@field AllowSnowCoverage fun(world: IWorldAccessor, blockPos: BlockPos): boolean
---@field GetBlockEntity fun(blockSel: BlockSelection): T
---@overload fun(position: BlockPos): T
---@field GetBEBehavior fun(pos: BlockPos): T
---@field GetInterface fun(world: IWorldAccessor, pos: BlockPos): T
---@field Clone fun(): Block
---@field HasBlockBehavior fun(withInheritance: boolean): boolean
---@field HasBehavior fun(withInheritance: boolean): boolean
---@overload fun(type: string, classRegistry: IClassRegistryAPI): boolean
---@overload fun(type: any, withInheritance: boolean): boolean
---@field GetLiquidBarrierHeightOnSide fun(face: BlockFacing, pos: BlockPos): Single
---@field ToString fun(): string
---@field get_IsMissing fun(): boolean
---@field set_IsMissing fun(value: boolean): nil
---@field GetHashCode fun(): number
---@field get_MiningTier fun(): number
---@field set_MiningTier fun(value: number): nil
---@field OnLoadedNative fun(api: ICoreAPI): nil
---@field OnUnloaded fun(api: ICoreAPI): nil
---@field GetLightHsv fun(blockAccessor: IBlockAccessor, pos: BlockPos, stack: ItemStack): number[]
---@field GetNutritionProperties fun(world: IWorldAccessor, itemstack: ItemStack, forEntity: Entity): FoodNutritionProperties
---@field GetTransitionableProperties fun(world: IWorldAccessor, itemstack: ItemStack, forEntity: Entity): TransitionableProperties[]
---@field RequiresTransitionableTicking fun(world: IWorldAccessor, itemstack: ItemStack): boolean
---@field GetStorageFlags fun(itemstack: ItemStack): EnumItemStorageFlags
---@field GetItemDamageColor fun(itemstack: ItemStack): number
---@field ShouldDisplayItemDamage fun(itemstack: ItemStack): boolean
---@field OnBeforeRender fun(capi: ICoreClientAPI, itemstack: ItemStack, target: EnumItemRenderTarget, renderinfo: ItemRenderInfo&): nil
---@field GetDurability fun(itemstack: IItemStack): number
---@field GetMaxDurability fun(itemstack: ItemStack): number
---@field GetRemainingDurability fun(itemstack: ItemStack): number
---@field GetAttackPower fun(withItemStack: IItemStack): Single
---@field GetAttackRange fun(withItemStack: IItemStack): Single
---@field OnBlockBreaking fun(player: IPlayer, blockSel: BlockSelection, itemslot: ItemSlot, remainingResistance: Single, dt: Single, counter: number): Single
---@field OnModifiedInInventorySlot fun(world: IWorldAccessor, slot: ItemSlot, extractedStack: ItemStack): nil
---@field OnBlockBrokenWith fun(world: IWorldAccessor, byEntity: Entity, itemslot: ItemSlot, blockSel: BlockSelection, dropQuantityMultiplier: Single): boolean
---@field GetMiningSpeed fun(itemstack: IItemStack, blockSel: BlockSelection, block: Block, forPlayer: IPlayer): Single
---@field GeldHeldFpHitAnimation fun(slot: ItemSlot, byEntity: Entity): ModelTransformKeyFrame[]
---@field GetHeldTpHitAnimation fun(slot: ItemSlot, byEntity: Entity): string
---@field GetHeldReadyAnimation fun(activeHotbarSlot: ItemSlot, forEntity: Entity, hand: EnumHand): string
---@field GetHeldTpIdleAnimation fun(activeHotbarSlot: ItemSlot, forEntity: Entity, hand: EnumHand): string
---@field GetHeldTpUseAnimation fun(activeHotbarSlot: ItemSlot, forEntity: Entity): string
---@field OnAttackingWith fun(world: IWorldAccessor, byEntity: Entity, attackedEntity: Entity, itemslot: ItemSlot): nil
---@field MatchesForCrafting fun(inputStack: ItemStack, gridRecipe: GridRecipe, ingredient: CraftingRecipeIngredient): boolean
---@field OnConsumedByCrafting fun(allInputSlots: ItemSlot[], stackInSlot: ItemSlot, gridRecipe: GridRecipe, fromIngredient: CraftingRecipeIngredient, byPlayer: IPlayer, quantity: number): nil
---@field ConsumeCraftingIngredients fun(slots: ItemSlot[], outputSlot: ItemSlot, matchingRecipe: GridRecipe): boolean
---@field DamageItem fun(world: IWorldAccessor, byEntity: Entity, itemslot: ItemSlot, amount: number): nil
---@field RefillSlotIfEmpty fun(slot: ItemSlot, byEntity: EntityAgent, matcher: ActionConsumable`1): nil
---@field GetToolModes fun(slot: ItemSlot, forPlayer: IClientPlayer, blockSel: BlockSelection): SkillItem[]
---@field GetToolMode fun(slot: ItemSlot, byPlayer: IPlayer, blockSelection: BlockSelection): number
---@field SetToolMode fun(slot: ItemSlot, byPlayer: IPlayer, blockSelection: BlockSelection, toolMode: number): nil
---@field OnHeldRenderOpaque fun(inSlot: ItemSlot, byPlayer: IClientPlayer): nil
---@field OnHeldRenderOit fun(inSlot: ItemSlot, byPlayer: IClientPlayer): nil
---@field OnHeldRenderOrtho fun(inSlot: ItemSlot, byPlayer: IClientPlayer): nil
---@field OnHeldIdle fun(slot: ItemSlot, byEntity: EntityAgent): nil
---@field OnHeldActionAnimStart fun(slot: ItemSlot, byEntity: EntityAgent, type: EnumHandInteract): nil
---@field OnGroundIdle fun(entityItem: EntityItem): nil
---@field InGuiIdle fun(world: IWorldAccessor, stack: ItemStack): nil
---@field OnCollected fun(stack: ItemStack, entity: Entity): nil
---@field OnHeldUseStart fun(slot: ItemSlot, byEntity: EntityAgent, blockSel: BlockSelection, entitySel: EntitySelection, useType: EnumHandInteract, firstEvent: boolean, handling: EnumHandHandling&): nil
---@field OnHeldUseCancel fun(secondsPassed: Single, slot: ItemSlot, byEntity: EntityAgent, blockSel: BlockSelection, entitySel: EntitySelection, cancelReason: EnumItemUseCancelReason): EnumHandInteract
---@field OnHeldUseStep fun(secondsPassed: Single, slot: ItemSlot, byEntity: EntityAgent, blockSel: BlockSelection, entitySel: EntitySelection): EnumHandInteract
---@field OnHeldUseStop fun(secondsPassed: Single, slot: ItemSlot, byEntity: EntityAgent, blockSel: BlockSelection, entitySel: EntitySelection, useType: EnumHandInteract): nil
---@field OnHeldAttackStart fun(slot: ItemSlot, byEntity: EntityAgent, blockSel: BlockSelection, entitySel: EntitySelection, handling: EnumHandHandling&): nil
---@field OnHeldAttackCancel fun(secondsPassed: Single, slot: ItemSlot, byEntity: EntityAgent, blockSelection: BlockSelection, entitySel: EntitySelection, cancelReason: EnumItemUseCancelReason): boolean
---@field OnHeldAttackStep fun(secondsPassed: Single, slot: ItemSlot, byEntity: EntityAgent, blockSelection: BlockSelection, entitySel: EntitySelection): boolean
---@field OnHeldAttackStop fun(secondsPassed: Single, slot: ItemSlot, byEntity: EntityAgent, blockSelection: BlockSelection, entitySel: EntitySelection): nil
---@field OnHeldInteractStart fun(slot: ItemSlot, byEntity: EntityAgent, blockSel: BlockSelection, entitySel: EntitySelection, firstEvent: boolean, handling: EnumHandHandling&): nil
---@field OnHeldInteractStep fun(secondsUsed: Single, slot: ItemSlot, byEntity: EntityAgent, blockSel: BlockSelection, entitySel: EntitySelection): boolean
---@field OnHeldInteractStop fun(secondsUsed: Single, slot: ItemSlot, byEntity: EntityAgent, blockSel: BlockSelection, entitySel: EntitySelection): nil
---@field OnHeldInteractCancel fun(secondsUsed: Single, slot: ItemSlot, byEntity: EntityAgent, blockSel: BlockSelection, entitySel: EntitySelection, cancelReason: EnumItemUseCancelReason): boolean
---@field OnHeldDropped fun(world: IWorldAccessor, byPlayer: IPlayer, slot: ItemSlot, quantity: number, handling: EnumHandling&): nil
---@field GetHeldItemName fun(itemStack: ItemStack): string
---@field GetItemDescText fun(): string
---@field GetHeldInteractionHelp fun(inSlot: ItemSlot): WorldInteraction[]
---@field AppendPerishableInfoText fun(inSlot: ItemSlot, dsc: stringBuilder, world: IWorldAccessor): Single
---@field OnHandbookRecipeRender fun(capi: ICoreClientAPI, recipe: GridRecipe, slot: ItemSlot, x: Double, y: Double, z: Double, size: Double): nil
---@field GetHandBookStacks fun(capi: ICoreClientAPI): any[]
---@field CanBePlacedInto fun(stack: ItemStack, slot: ItemSlot): boolean
---@field GetMergableQuantity fun(sinkStack: ItemStack, sourceStack: ItemStack, priority: EnumMergePriority): number
---@field TryMergeStacks fun(op: ItemStackMergeOperation): nil
---@field GetMeltingDuration fun(world: IWorldAccessor, cookingSlotsProvider: ISlotProvider, inputSlot: ItemSlot): Single
---@field GetMeltingPoint fun(world: IWorldAccessor, cookingSlotsProvider: ISlotProvider, inputSlot: ItemSlot): Single
---@field CanSmelt fun(world: IWorldAccessor, cookingSlotsProvider: ISlotProvider, inputStack: ItemStack, outputStack: ItemStack): boolean
---@field DoSmelt fun(world: IWorldAccessor, cookingSlotsProvider: ISlotProvider, inputSlot: ItemSlot, outputSlot: ItemSlot): nil
---@field CanSpoil fun(itemstack: ItemStack): boolean
---@field UpdateAndGetTransitionState fun(world: IWorldAccessor, inslot: ItemSlot, type: EnumTransitionany): TransitionState
---@field SetTransitionState fun(stack: ItemStack, type: EnumTransitionany, transitionedHours: Single): nil
---@field GetTransitionRateMul fun(world: IWorldAccessor, inSlot: ItemSlot, transType: EnumTransitionany): Single
---@field UpdateAndGetTransitionStates fun(world: IWorldAccessor, inslot: ItemSlot): TransitionState[]
---@field OnTransitionNow fun(slot: ItemSlot, props: TransitionableProperties): ItemStack
---@field IsReasonablyFresh fun(world: IWorldAccessor, itemstack: ItemStack): boolean
---@field HasTemperature fun(itemstack: IItemStack): boolean
---@field GetTemperature fun(world: IWorldAccessor, itemstack: ItemStack): Single
---@field SetTemperature fun(world: IWorldAccessor, itemstack: ItemStack, temperature: Single, delayCooldown: boolean): nil
---@field Equals fun(thisStack: ItemStack, otherStack: ItemStack, ignoreAttributeSubTrees: string[]): boolean
---@field Satisfies fun(thisStack: ItemStack, otherStack: ItemStack): boolean
---@field OnStoreCollectibleMappings fun(world: IWorldAccessor, inSlot: ItemSlot, blockIdMapping: table<any, any>, itemIdMapping: table<any, any>): nil
---@field OnLoadCollectibleMappings fun(worldForResolve: IWorldAccessor, inSlot: ItemSlot, oldBlockIdMapping: table<any, any>, oldItemIdMapping: table<any, any>): nil
---@overload fun(worldForResolve: IWorldAccessor, inSlot: ItemSlot, oldBlockIdMapping: table<any, any>, oldItemIdMapping: table<any, any>, resolveImports: boolean): nil
---@field IsLiquid fun(): boolean
---@field GetCollectibleBehavior fun(type: any, withInheritance: boolean): CollectibleBehavior
---@overload fun(withInheritance: boolean): T
---@overload fun(type: any): CollectibleBehavior
---@overload fun(): T
---@field OnSmeltAttempt fun(inventorySmelting: InventoryBase): boolean
---@field CodeWithPath fun(path: string): AssetLocation
---@field CodeWithoutParts fun(componentsToRemove: number): string
---@field CodeEndWithoutParts fun(componentsToRemove: number): string
---@field CodeWithParts fun(components: string[]): AssetLocation
---@overload fun(component: string): AssetLocation
---@field CodeWithVariant fun(type: string, value: string): AssetLocation
---@field CodeWithVariants fun(valuesByType: table<any, any>): AssetLocation
---@overload fun(types: string[], values: string[]): AssetLocation
---@field CodeWithPart fun(part: string, atPosition: number): AssetLocation
---@field LastCodePart fun(posFromRight: number): string
---@field FirstCodePart fun(posFromLeft: number): string
---@field WildCardMatch fun(wildcards: AssetLocation[]): boolean
---@overload fun(wildCard: AssetLocation): boolean
---@overload fun(wildcards: string[]): boolean
---@overload fun(wildCard: string): boolean
---@field GetType fun(): any
---@field Equals fun(obj: table): boolean
---@field Id number
---@field ItemClass number
---@field ForFluidsLayer number
---@field RemapToLiquidsLayer number
---@field FirstTextureInventory number
---@field PushVector number
---@field ClimateColorMapForMap number
---@field SeasonColorMapForMap number
---@field AllSidesOpaque number
---@field IsMissing number
---@field MiningTier number
---@field BlockId number
---@field DrawType number
---@field RenderPass number
---@field Ambientocclusion number
---@field WalkSpeedMultiplier number
---@field DragMultiplier number
---@field PartialSelection number
---@field Sounds number
---@field VertexFlags number
---@field Frostable number
---@field LightAbsorption number
---@field PlacedPriorityInteract number
---@field LightTraversable number
---@field Replaceable number
---@field Fertility number
---@field RequiredMiningTier number
---@field Resistance number
---@field BlockMaterial number
---@field RandomizeAxes number
---@field RandomDrawOffset number
---@field RandomizeRotations number
---@field RandomSizeAdjust number
---@field alternatingVOffset number
---@field alternatingVOffsetFaces number
---@field ShapeInventory number
---@field Shape number
---@field Lod0Shape number
---@field Lod2Shape number
---@field Lod0Mesh number
---@field Lod2Mesh number
---@field DoNotRenderAtLod2 number
---@field Textures number
---@field FastTextureVariants number
---@field TexturesInventory number
---@field SideOpaque number
---@field SideSolid number
---@field SideAo number
---@field EmitSideAo number
---@field AllowSpawnCreatureGroups number
---@field AllCreaturesAllowed number
---@field FaceCullMode number
---@field ClimateColorMap number
---@field ClimateColorMapResolved number
---@field SeasonColorMap number
---@field SeasonColorMapResolved number
---@field ShapeUsesColormap number
---@field LoadColorMapAnyway number
---@field ExtraColorBits number
---@field CollisionBoxes number
---@field SelectionBoxes number
---@field ParticleCollisionBoxes number
---@field Climbable number
---@field RainPermeable number
---@field LiquidLevel number
---@field LiquidCode number
---@field HasAlternates number
---@field HasTiles number
---@field BlockBehaviors number
---@field BlockEntityBehaviors number
---@field Drops number
---@field SplitDropStacks number
---@field CropProps number
---@field EntityClass number
---@field CustomBlockLayerHandler number
---@field TraversalCost number
---@field CanStep number
---@field AllowStepWhenStuck number
---@field decorBehaviorFlags number
---@field DecorThickness number
---@field InteractionHelpYOffset number
---@field TextureSubIdForBlockColor number
---@field notSnowCovered number
---@field snowCovered1 number
---@field snowCovered2 number
---@field snowCovered3 number
---@field snowLevel number
---@field MatterState number
---@field MaxStackSize number
---@field Durability number
---@field Dimensions number
---@field LiquidSelectable number
---@field AttackPower number
---@field HeldPriorityInteract number
---@field AttackRange number
---@field DamagedBy number
---@field MiningSpeed number
---@field ToolTier number
---@field HeldSounds number
---@field CreativeInventoryTabs number
---@field CreativeInventoryStacks number
---@field RenderAlphaTest number
---@field GuiTransform number
---@field FpHandTransform number
---@field TpHandTransform number
---@field TpOffHandTransform number
---@field GroundTransform number
---@field Attributes number
---@field CombustibleProps number
---@field NutritionProps number
---@field TransitionableProps number
---@field GrindingProps number
---@field CrushingProps number
---@field ParticleProperties number
---@field TopMiddlePos number
---@field Tool number
---@field StorageFlags number
---@field MaterialDensity number
---@field HeldTpHitAnimation number
---@field HeldRightTpIdleAnimation number
---@field HeldLeftTpIdleAnimation number
---@field HeldLeftReadyAnimation number
---@field HeldRightReadyAnimation number
---@field HeldTpUseAnimation number
---@field CollectibleBehaviors number
---@field LightHsv number
---@field Code number
---@field VariantStrict number
---@field Variant number
---@field Class number
BlockGeneric = {}
