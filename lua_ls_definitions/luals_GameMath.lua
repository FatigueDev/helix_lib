---@meta GameMath
---@class GameMath: Object
---@field Sin fun(value: Single): Single
---@field Cos fun(value: Single): Single
---@field Acos fun(value: Single): Single
---@field Asin fun(value: Single): Single
---@field Tan fun(value: Single): Single
---@overload fun(value: Double): Double
---@overload fun(value: Double): Double
---@overload fun(value: Double): Double
---@overload fun(value: Double): Double
---@overload fun(value: Double): Double
---@field FastSin fun(rad: Single): Single
---@field FastCos fun(rad: Single): Single
---@field FastSinDeg fun(deg: Single): Single
---@field FastCosDeg fun(deg: Single): Single
---@field Sqrt fun(value: Single): Single
---@overload fun(value: Double): Single
---@field RootSumOfSquares fun(a: Single, b: Single, c: Single): Single
---@field SumOfSquares fun(a: Double, b: Double, c: Double): Double
---@field Square fun(a: Double): Double
---@field Clamp fun(val: Single, min: Single, max: Single): Single
---@overload fun(val: number, min: number, max: number): number
---@overload fun(val: number, min: number, max: number): number
---@overload fun(val: Double, min: Double, max: Double): Double
---@field InverseClamp fun(val: number, atLeastNeg: number, atLeastPos: number): number
---@field Mod fun(k: number, n: number): number
---@overload fun(k: Unumber, n: Unumber): Unumber
---@overload fun(k: Single, n: Single): Single
---@overload fun(k: Double, n: Double): Double
---@field RoundRandom fun(rand: Random, value: Single): number
---@overload fun(rand: LCGRandom, value: Single): number
---@field AngleDegDistance fun(start: Single, end: Single): Single
---@field AngleRadDistance fun(start: Single, end: Single): Single
---@field NormaliseAngleRad fun(angleRad: Single): Single
---@field Smallest fun(a: Double, b: Double): Double
---@field Largest fun(a: Double, b: Double): Double
---@field CyclicValueDistance fun(start: Single, end: Single, period: Single): Single
---@overload fun(start: Double, end: Double, period: Double): Double
---@field GenGaussKernel fun(sigma: Double, size: number): Double[,]
---@field BiLerpColorMap fun(map: IntDataMap2D, zoom: number): number[]
---@field BiLerpByte fun(lx: Single, ly: Single, byteIndex: number, leftTop: number, rightTop: number, leftBottom: number, rightBottom: number): number
---@field BiSerpByte fun(lx: Single, ly: Single, byteIndex: number, leftTop: number, rightTop: number, leftBottom: number, rightBottom: number): number
---@field BiLerpRgbaColor fun(lx: Single, ly: Single, leftTop: number, rightTop: number, leftBottom: number, rightBottom: number): number
---@field BiLerpRgbColor fun(lx: Single, ly: Single, leftTop: number, rightTop: number, leftBottom: number, rightBottom: number): number
---@field BiSerpRgbColor fun(lx: Single, ly: Single, leftTop: number, rightTop: number, leftBottom: number, rightBottom: number): number
---@field LerpRgbColor fun(lx: Single, left: number, right: number): number
---@field LerpRgbaColor fun(lx: Single, left: number, right: number): number
---@field LerpByte fun(lx: Single, left: number, right: number): number
---@field BiLerp fun(topleft: Single, topright: Single, botleft: Single, botright: Single, x: Single, z: Single): Single
---@overload fun(topleft: Double, topright: Double, botleft: Double, botright: Double, x: Double, z: Double): Double
---@field Mix fun(v0: Single, v1: Single, t: Single): Single
---@overload fun(v0: number, v1: number, t: Single): number
---@field Lerp fun(v0: Single, v1: Single, t: Single): Single
---@overload fun(v0: Double, v1: Double, t: Double): Double
---@field Serp fun(v0: Single, v1: Single, t: Single): Single
---@field CPCatmullRomSplineLerp fun(t: Double, p: Double[], time: Double[]): Double
---@field SmoothStep fun(x: Single): Single
---@overload fun(x: Double): Double
---@field Smootherstep fun(edge0: Single, edge1: Single, x: Single): Single
---@overload fun(edge0: Double, edge1: Double, x: Double): Double
---@overload fun(x: Double): Double
---@field TriangleStep fun(val: number, left: number, right: number): Single
---@overload fun(val: Single, left: Single, right: Single): Single
---@field TriangleStepFast fun(val: number, mid: number, range: number): Single
---@field Max fun(values: Double[]): Double
---@overload fun(values: Single[]): Single
---@overload fun(values: number[]): number
---@field Min fun(values: number[]): number
---@overload fun(values: Single[]): Single
---@field SmoothMin fun(a: Single, b: Single, smoothingFactor: Single): Single
---@field SmoothMax fun(a: Single, b: Single, smoothingFactor: Single): Single
---@overload fun(a: Double, b: Double, smoothingFactor: Double): Double
---@overload fun(a: Double, b: Double, smoothingFactor: Double): Double
---@field Crc32 fun(input: string): Unumber
---@overload fun(input: number[]): Unumber
---@field DotNetStringHash fun(text: string): number
---@field Md5Hash fun(input: string): string
---@field oaatHashMany fun(x: number, count: number): number
---@field oaatHashUMany fun(x: Unumber): Unumber
---@field oaatHash fun(v: Vec2i): number
---@overload fun(x: number, y: number): number
---@overload fun(v: Vec3i): number
---@overload fun(x: number, y: number, z: number): number
---@field oaatHashU fun(x: number, y: number, z: number): Unumber
---@field oaatHash fun(v: Vec4i): number
---@field PrettyBadHash fun(x: number, y: number): Single
---@field MurmurHash3Mod fun(x: number, y: number, z: number, mod: number): number
---@field MurmurHash3 fun(x: number, y: number, z: number): number
---@field R2Sequence1D fun(n: number): Double
---@field R2Sequence2D fun(n: number): Vec2d
---@field R2Sequence3D fun(n: number): Vec3d
---@field FlipVal fun(x1: number&, x2: number&): nil
---@overload fun(x1: Double&, x2: Double&): nil
---@field Shuffle fun(rand: Random, array: T[]): nil
---@overload fun(rand: Random, array: any[]): nil
---@overload fun(rand: LCGRandom, array: any[]): nil
---@field BresenHamPlotLine3d fun(x0: number, y0: number, z0: number, x1: number, y1: number, z1: number, onPlot: PlotDelegate3D): nil
---@overload fun(x0: number, y0: number, z0: number, x1: number, y1: number, z1: number, onPlot: PlotDelegate3DBlockPos): nil
---@field BresenHamPlotLine2d fun(x0: number, y0: number, x1: number, y1: number, onPlot: PlotDelegate2D): nil
---@field ToEulerAngles fun(q: Vec4f): Vec3f
---@overload fun(q: Vec4d): Vec3d
---@field IntFromBools fun(intBools: number[]): number
---@overload fun(bools: boolean[]): number
---@field BoolsFromInt fun(bools: boolean[], v: number): nil
---@field GetType fun(): any
---@field ToString fun(): string
---@field Equals fun(obj: table): boolean
---@field GetHashCode fun(): number
GameMath = {}
