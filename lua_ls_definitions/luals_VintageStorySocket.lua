---@meta VintageStorySocket
---@class VintageStorySocket: Socket
---@field ctor fun(socketType: Socketany, protocolType: Protocolany): VintageStorySocket
---@overload fun(addressFamily: AddressFamily, socketType: Socketany, protocolType: Protocolany): VintageStorySocket
---@field get_Disposed fun(): boolean
---@field get_Available fun(): number
---@field get_LocalEndPoint fun(): EndPoint
---@field get_RemoteEndPoint fun(): EndPoint
---@field get_Handle fun(): IntPtr
---@field get_SafeHandle fun(): SafeSocketHandle
---@field get_Blocking fun(): boolean
---@field set_Blocking fun(value: boolean): nil
---@field get_UseOnlyOverlappedIO fun(): boolean
---@field set_UseOnlyOverlappedIO fun(value: boolean): nil
---@field get_Connected fun(): boolean
---@field get_AddressFamily fun(): AddressFamily
---@field get_SocketType fun(): Socketany
---@field get_ProtocolType fun(): Protocolany
---@field get_IsBound fun(): boolean
---@field get_ExclusiveAddressUse fun(): boolean
---@field set_ExclusiveAddressUse fun(value: boolean): nil
---@field get_ReceiveBufferSize fun(): number
---@field set_ReceiveBufferSize fun(value: number): nil
---@field get_SendBufferSize fun(): number
---@field set_SendBufferSize fun(value: number): nil
---@field get_ReceiveTimeout fun(): number
---@field set_ReceiveTimeout fun(value: number): nil
---@field get_SendTimeout fun(): number
---@field set_SendTimeout fun(value: number): nil
---@field get_LingerState fun(): LingerOption
---@field set_LingerState fun(value: LingerOption): nil
---@field get_NoDelay fun(): boolean
---@field set_NoDelay fun(value: boolean): nil
---@field get_Ttl fun(): Int16
---@field set_Ttl fun(value: Int16): nil
---@field get_DontFragment fun(): boolean
---@field set_DontFragment fun(value: boolean): nil
---@field get_MulticastLoopback fun(): boolean
---@field set_MulticastLoopback fun(value: boolean): nil
---@field get_EnableBroadcast fun(): boolean
---@field set_EnableBroadcast fun(value: boolean): nil
---@field get_DualMode fun(): boolean
---@field set_DualMode fun(value: boolean): nil
---@field Bind fun(localEP: EndPoint): nil
---@field Connect fun(remoteEP: EndPoint): nil
---@overload fun(address: IPAddress, port: number): nil
---@overload fun(host: string, port: number): nil
---@overload fun(addresses: IPAddress[], port: number): nil
---@field Close fun(): nil
---@overload fun(timeout: number): nil
---@field Listen fun(): nil
---@overload fun(backlog: number): nil
---@field Accept fun(): Socket
---@field Send fun(buffer: number[], size: number, socketFlags: SocketFlags): number
---@overload fun(buffer: number[], socketFlags: SocketFlags): number
---@overload fun(buffer: number[]): number
---@overload fun(buffers: Iany[]): number
---@overload fun(buffers: Iany[], socketFlags: SocketFlags): number
---@overload fun(buffers: Iany[], socketFlags: SocketFlags, errorCode: SocketError&): number
---@overload fun(buffer: number[], offset: number, size: number, socketFlags: SocketFlags): number
---@overload fun(buffer: number[], offset: number, size: number, socketFlags: SocketFlags, errorCode: SocketError&): number
---@overload fun(buffer: ReadOnlySpan`1): number
---@overload fun(buffer: ReadOnlySpan`1, socketFlags: SocketFlags): number
---@overload fun(buffer: ReadOnlySpan`1, socketFlags: SocketFlags, errorCode: SocketError&): number
---@field SendFile fun(fileName: string): nil
---@overload fun(fileName: string, preBuffer: number[], postBuffer: number[], flags: TransmitFileOptions): nil
---@overload fun(fileName: string, preBuffer: ReadOnlySpan`1, postBuffer: ReadOnlySpan`1, flags: TransmitFileOptions): nil
---@field SendTo fun(buffer: number[], offset: number, size: number, socketFlags: SocketFlags, remoteEP: EndPoint): number
---@overload fun(buffer: number[], size: number, socketFlags: SocketFlags, remoteEP: EndPoint): number
---@overload fun(buffer: number[], socketFlags: SocketFlags, remoteEP: EndPoint): number
---@overload fun(buffer: number[], remoteEP: EndPoint): number
---@overload fun(buffer: ReadOnlySpan`1, remoteEP: EndPoint): number
---@overload fun(buffer: ReadOnlySpan`1, socketFlags: SocketFlags, remoteEP: EndPoint): number
---@field Receive fun(buffer: number[], size: number, socketFlags: SocketFlags): number
---@overload fun(buffer: number[], socketFlags: SocketFlags): number
---@overload fun(buffer: number[]): number
---@overload fun(buffer: number[], offset: number, size: number, socketFlags: SocketFlags): number
---@overload fun(buffer: number[], offset: number, size: number, socketFlags: SocketFlags, errorCode: SocketError&): number
---@overload fun(buffer: Span`1): number
---@overload fun(buffer: Span`1, socketFlags: SocketFlags): number
---@overload fun(buffer: Span`1, socketFlags: SocketFlags, errorCode: SocketError&): number
---@overload fun(buffers: Iany[]): number
---@overload fun(buffers: Iany[], socketFlags: SocketFlags): number
---@overload fun(buffers: Iany[], socketFlags: SocketFlags, errorCode: SocketError&): number
---@field ReceiveMessageFrom fun(buffer: number[], offset: number, size: number, socketFlags: SocketFlags&, remoteEP: EndPoint&, ipPacketInformation: IPPacketInformation&): number
---@overload fun(buffer: Span`1, socketFlags: SocketFlags&, remoteEP: EndPoint&, ipPacketInformation: IPPacketInformation&): number
---@field ReceiveFrom fun(buffer: number[], offset: number, size: number, socketFlags: SocketFlags, remoteEP: EndPoint&): number
---@overload fun(buffer: number[], size: number, socketFlags: SocketFlags, remoteEP: EndPoint&): number
---@overload fun(buffer: number[], socketFlags: SocketFlags, remoteEP: EndPoint&): number
---@overload fun(buffer: number[], remoteEP: EndPoint&): number
---@overload fun(buffer: Span`1, remoteEP: EndPoint&): number
---@overload fun(buffer: Span`1, socketFlags: SocketFlags, remoteEP: EndPoint&): number
---@field IOControl fun(ioControlCode: number, optionInValue: number[], optionOutValue: number[]): number
---@overload fun(ioControlCode: IOControlCode, optionInValue: number[], optionOutValue: number[]): number
---@field SetSocketOption fun(optionLevel: SocketOptionLevel, optionName: SocketOptionName, optionValue: number): nil
---@overload fun(optionLevel: SocketOptionLevel, optionName: SocketOptionName, optionValue: number[]): nil
---@overload fun(optionLevel: SocketOptionLevel, optionName: SocketOptionName, optionValue: boolean): nil
---@overload fun(optionLevel: SocketOptionLevel, optionName: SocketOptionName, optionValue: table): nil
---@field SetRawSocketOption fun(optionLevel: number, optionName: number, optionValue: ReadOnlySpan`1): nil
---@field GetSocketOption fun(optionLevel: SocketOptionLevel, optionName: SocketOptionName): table
---@overload fun(optionLevel: SocketOptionLevel, optionName: SocketOptionName, optionValue: number[]): nil
---@overload fun(optionLevel: SocketOptionLevel, optionName: SocketOptionName, optionLength: number): number[]
---@field GetRawSocketOption fun(optionLevel: number, optionName: number, optionValue: Span`1): number
---@field SetIPProtectionLevel fun(level: IPProtectionLevel): nil
---@field Poll fun(microSeconds: number, mode: SelectMode): boolean
---@overload fun(timeout: TimeSpan, mode: SelectMode): boolean
---@field BeginConnect fun(remoteEP: EndPoint, callback: AsyncCallback, state: table): IAsyncResult
---@overload fun(host: string, port: number, requestCallback: AsyncCallback, state: table): IAsyncResult
---@overload fun(address: IPAddress, port: number, requestCallback: AsyncCallback, state: table): IAsyncResult
---@overload fun(addresses: IPAddress[], port: number, requestCallback: AsyncCallback, state: table): IAsyncResult
---@field EndConnect fun(asyncResult: IAsyncResult): nil
---@field BeginDisconnect fun(reuseSocket: boolean, callback: AsyncCallback, state: table): IAsyncResult
---@field Disconnect fun(reuseSocket: boolean): nil
---@field EndDisconnect fun(asyncResult: IAsyncResult): nil
---@field BeginSend fun(buffer: number[], offset: number, size: number, socketFlags: SocketFlags, callback: AsyncCallback, state: table): IAsyncResult
---@overload fun(buffer: number[], offset: number, size: number, socketFlags: SocketFlags, errorCode: SocketError&, callback: AsyncCallback, state: table): IAsyncResult
---@overload fun(buffers: Iany[], socketFlags: SocketFlags, callback: AsyncCallback, state: table): IAsyncResult
---@overload fun(buffers: Iany[], socketFlags: SocketFlags, errorCode: SocketError&, callback: AsyncCallback, state: table): IAsyncResult
---@field EndSend fun(asyncResult: IAsyncResult): number
---@overload fun(asyncResult: IAsyncResult, errorCode: SocketError&): number
---@field BeginSendFile fun(fileName: string, callback: AsyncCallback, state: table): IAsyncResult
---@overload fun(fileName: string, preBuffer: number[], postBuffer: number[], flags: TransmitFileOptions, callback: AsyncCallback, state: table): IAsyncResult
---@field EndSendFile fun(asyncResult: IAsyncResult): nil
---@field BeginSendTo fun(buffer: number[], offset: number, size: number, socketFlags: SocketFlags, remoteEP: EndPoint, callback: AsyncCallback, state: table): IAsyncResult
---@field EndSendTo fun(asyncResult: IAsyncResult): number
---@field BeginReceive fun(buffer: number[], offset: number, size: number, socketFlags: SocketFlags, callback: AsyncCallback, state: table): IAsyncResult
---@overload fun(buffer: number[], offset: number, size: number, socketFlags: SocketFlags, errorCode: SocketError&, callback: AsyncCallback, state: table): IAsyncResult
---@overload fun(buffers: Iany[], socketFlags: SocketFlags, callback: AsyncCallback, state: table): IAsyncResult
---@overload fun(buffers: Iany[], socketFlags: SocketFlags, errorCode: SocketError&, callback: AsyncCallback, state: table): IAsyncResult
---@field EndReceive fun(asyncResult: IAsyncResult): number
---@overload fun(asyncResult: IAsyncResult, errorCode: SocketError&): number
---@field BeginReceiveMessageFrom fun(buffer: number[], offset: number, size: number, socketFlags: SocketFlags, remoteEP: EndPoint&, callback: AsyncCallback, state: table): IAsyncResult
---@field EndReceiveMessageFrom fun(asyncResult: IAsyncResult, socketFlags: SocketFlags&, endPoint: EndPoint&, ipPacketInformation: IPPacketInformation&): number
---@field BeginReceiveFrom fun(buffer: number[], offset: number, size: number, socketFlags: SocketFlags, remoteEP: EndPoint&, callback: AsyncCallback, state: table): IAsyncResult
---@field EndReceiveFrom fun(asyncResult: IAsyncResult, endPoint: EndPoint&): number
---@field BeginAccept fun(callback: AsyncCallback, state: table): IAsyncResult
---@field EndAccept fun(asyncResult: IAsyncResult): Socket
---@overload fun(receiveSize: number, callback: AsyncCallback, state: table): IAsyncResult
---@overload fun(acceptSocket: Socket, receiveSize: number, callback: AsyncCallback, state: table): IAsyncResult
---@overload fun(buffer: number[]&, asyncResult: IAsyncResult): Socket
---@overload fun(buffer: number[]&, bytesTransferred: number&, asyncResult: IAsyncResult): Socket
---@field Shutdown fun(how: SocketShutdown): nil
---@field AcceptAsync fun(e: SocketAsyncEventArgs): boolean
---@field ConnectAsync fun(e: SocketAsyncEventArgs): boolean
---@field DisconnectAsync fun(e: SocketAsyncEventArgs): boolean
---@field ReceiveAsync fun(e: SocketAsyncEventArgs): boolean
---@field ReceiveFromAsync fun(e: SocketAsyncEventArgs): boolean
---@field ReceiveMessageFromAsync fun(e: SocketAsyncEventArgs): boolean
---@field SendAsync fun(e: SocketAsyncEventArgs): boolean
---@field SendPacketsAsync fun(e: SocketAsyncEventArgs): boolean
---@field SendToAsync fun(e: SocketAsyncEventArgs): boolean
---@field Dispose fun(): nil
---@field AcceptAsync fun(): Task`1
---@overload fun(cancellationToken: CancellationToken): ValueTask`1
---@overload fun(acceptSocket: Socket): Task`1
---@overload fun(acceptSocket: Socket, cancellationToken: CancellationToken): ValueTask`1
---@overload fun(remoteEP: EndPoint): Task
---@overload fun(remoteEP: EndPoint, cancellationToken: CancellationToken): ValueTask
---@overload fun(address: IPAddress, port: number): Task
---@overload fun(address: IPAddress, port: number, cancellationToken: CancellationToken): ValueTask
---@overload fun(addresses: IPAddress[], port: number): Task
---@overload fun(addresses: IPAddress[], port: number, cancellationToken: CancellationToken): ValueTask
---@overload fun(host: string, port: number): Task
---@overload fun(host: string, port: number, cancellationToken: CancellationToken): ValueTask
---@overload fun(reuseSocket: boolean, cancellationToken: CancellationToken): ValueTask
---@overload fun(buffer: ArraySegment`1): Task`1
---@overload fun(buffer: ArraySegment`1, socketFlags: SocketFlags): Task`1
---@overload fun(buffer: Memory`1, cancellationToken: CancellationToken): ValueTask`1
---@overload fun(buffer: Memory`1, socketFlags: SocketFlags, cancellationToken: CancellationToken): ValueTask`1
---@overload fun(buffers: Iany[]): Task`1
---@overload fun(buffers: Iany[], socketFlags: SocketFlags): Task`1
---@overload fun(buffer: ArraySegment`1, remoteEndPoint: EndPoint): Task`1
---@overload fun(buffer: ArraySegment`1, socketFlags: SocketFlags, remoteEndPoint: EndPoint): Task`1
---@overload fun(buffer: Memory`1, remoteEndPoint: EndPoint, cancellationToken: CancellationToken): ValueTask`1
---@overload fun(buffer: Memory`1, socketFlags: SocketFlags, remoteEndPoint: EndPoint, cancellationToken: CancellationToken): ValueTask`1
---@overload fun(buffer: ArraySegment`1, remoteEndPoint: EndPoint): Task`1
---@overload fun(buffer: ArraySegment`1, socketFlags: SocketFlags, remoteEndPoint: EndPoint): Task`1
---@overload fun(buffer: Memory`1, remoteEndPoint: EndPoint, cancellationToken: CancellationToken): ValueTask`1
---@overload fun(buffer: Memory`1, socketFlags: SocketFlags, remoteEndPoint: EndPoint, cancellationToken: CancellationToken): ValueTask`1
---@overload fun(buffer: ArraySegment`1): Task`1
---@overload fun(buffer: ArraySegment`1, socketFlags: SocketFlags): Task`1
---@overload fun(buffer: ReadOnlyMemory`1, cancellationToken: CancellationToken): ValueTask`1
---@overload fun(buffer: ReadOnlyMemory`1, socketFlags: SocketFlags, cancellationToken: CancellationToken): ValueTask`1
---@overload fun(buffers: Iany[]): Task`1
---@overload fun(buffers: Iany[], socketFlags: SocketFlags): Task`1
---@overload fun(buffer: ArraySegment`1, remoteEP: EndPoint): Task`1
---@overload fun(buffer: ArraySegment`1, socketFlags: SocketFlags, remoteEP: EndPoint): Task`1
---@overload fun(buffer: ReadOnlyMemory`1, remoteEP: EndPoint, cancellationToken: CancellationToken): ValueTask`1
---@overload fun(buffer: ReadOnlyMemory`1, socketFlags: SocketFlags, remoteEP: EndPoint, cancellationToken: CancellationToken): ValueTask`1
---@field SendFileAsync fun(fileName: string, cancellationToken: CancellationToken): ValueTask
---@overload fun(fileName: string, preBuffer: ReadOnlyMemory`1, postBuffer: ReadOnlyMemory`1, flags: TransmitFileOptions, cancellationToken: CancellationToken): ValueTask
---@field DuplicateAndClose fun(targetProcessId: number): SocketInformation
---@field GetType fun(): any
---@field ToString fun(): string
---@field Equals fun(obj: table): boolean
---@field GetHashCode fun(): number
---@field Disposed boolean
---@field Available boolean
---@field LocalEndPoint boolean
---@field RemoteEndPoint boolean
---@field Handle boolean
---@field SafeHandle boolean
---@field Blocking boolean
---@field UseOnlyOverlappedIO boolean
---@field Connected boolean
---@field AddressFamily boolean
---@field SocketType boolean
---@field ProtocolType boolean
---@field IsBound boolean
---@field ExclusiveAddressUse boolean
---@field ReceiveBufferSize boolean
---@field SendBufferSize boolean
---@field ReceiveTimeout boolean
---@field SendTimeout boolean
---@field LingerState boolean
---@field NoDelay boolean
---@field Ttl boolean
---@field DontFragment boolean
---@field MulticastLoopback boolean
---@field EnableBroadcast boolean
---@field DualMode boolean
VintageStorySocket = {}
